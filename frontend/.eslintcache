[{"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/index.js":"1","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/App.js":"2","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/reportWebVitals.js":"3","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/navbar.component.js":"4","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/register.component.js":"5","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/login.component.js":"6","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/rprofile.component.js":"7","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/landing.component.js":"8","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/welcome.component.js":"9","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/createjob.component.js":"10","/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/showjobs.component.js":"11"},{"size":198,"mtime":1610906073024,"results":"12","hashOfConfig":"13"},{"size":1267,"mtime":1611484427753,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1610526032622,"results":"15","hashOfConfig":"13"},{"size":1936,"mtime":1611484560101,"results":"16","hashOfConfig":"13"},{"size":4071,"mtime":1611408469375,"results":"17","hashOfConfig":"13"},{"size":2397,"mtime":1611501205690,"results":"18","hashOfConfig":"13"},{"size":3363,"mtime":1611319821068,"results":"19","hashOfConfig":"13"},{"size":201,"mtime":1611520885889,"results":"20","hashOfConfig":"13"},{"size":310,"mtime":1611501216114,"results":"21","hashOfConfig":"13"},{"size":5574,"mtime":1611417012564,"results":"22","hashOfConfig":"13"},{"size":13949,"mtime":1611522689392,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"13rtnel",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/index.js",[],["50","51"],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/App.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/reportWebVitals.js",[],["52","53"],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/navbar.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/register.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/login.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/rprofile.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/landing.component.js",[],["54","55"],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/welcome.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/createjob.component.js",[],"/home/aryan/Desktop/iiit/4sem/dass/ass1/ass/frontend/src/components/showjobs.component.js",["56"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Fuse from 'fuse.js';\nimport ls from \"local-storage\";\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nexport default class ShowJobs extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            jobs: [],\n            // sortedJobs: [],\n            ogJobs: [],\n            sortSalary:true,\n            sortDuration:true,\n            minsal:'',\n            maxsal:'',\n            duration:'',\n            search:'',\n            showalert:false,\n        };\n\n        this.sortChangeSal = this.sortChangeSal.bind(this);\n        this.sortChangeDur = this.sortChangeDur.bind(this);\n        this.renderIconSal = this.renderIconSal.bind(this);\n        this.renderIconDur = this.renderIconDur.bind(this);\n        this.onChangeMinsal = this.onChangeMinsal.bind(this);\n        this.onChangeMaxsal = this.onChangeMaxsal.bind(this);\n        this.onSubmitFiltersal = this.onSubmitFiltersal.bind(this);\n        this.handleClearFilters = this.handleClearFilters.bind(this);\n        this.onChangeDuration = this.onChangeDuration.bind(this);\n        this.onSubmitFilterdur = this.onSubmitFilterdur.bind(this);\n        this.onChangeSearch = this.onChangeSearch.bind(this);\n        this.handleApply = this.handleApply.bind(this);\n\t}\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/jobs')\n            .then(response => {\n                this.setState({jobs: response.data, ogJobs:response.data});\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n    }\n\n    sortChangeSal(){\n        var array = this.state.jobs;\n        var flag = this.state.sortSalary;\n        array.sort( (a, b) => {\n            if(a.salary !== undefined && b.salary !== undefined){\n                return (1 - flag*2) * (a.salary - b.salary);\n            }\n            else{\n                return 1;\n            }\n        });\n        this.setState({\n            jobs:array,\n            sortSalary:!this.state.sortSalary,\n        })\n    }\n    renderIconSal(){\n        if(this.state.sortSalary){\n            return(<ArrowDownwardIcon/>)\n        }\n        else{\n            return(<ArrowUpwardIcon/>)            \n        }\n    }\n\n    sortChangeDur(){\n        var array = this.state.jobs;\n        var flag = this.state.sortDuration;\n        array.sort( (a, b) => {\n            if(a.duration !== undefined && b.duration !== undefined){\n                return (1 - flag*2) * (a.duration - b.duration);\n            }\n            else{\n                return 1;\n            }\n        });\n        this.setState({\n            jobs:array,\n            sortDuration:!this.state.sortDuration,\n        })\n    }\n    renderIconDur(){\n        if(this.state.sortDuration){\n            return(<ArrowDownwardIcon/>)\n        }\n        else{\n            return(<ArrowUpwardIcon/>)            \n        }\n    }\n\n    onChangeMinsal(e) {this.setState({minsal: e.target.value})};\n    onChangeMaxsal(e) {this.setState({maxsal: e.target.value})};\n    onChangeDuration(e) {this.setState({duration: e.target.value})};\n\n    async onChangeSearch(e){\n        await this.setState({search: e.target.value});\n        if (this.state.search.length !== 0) {\n\n            const fuse = new Fuse(this.state.jobs, {keys: ['title']})\n            const results = fuse.search(this.state.search);\n\n            this.setState({\n                jobs: results.map(result => result.item)\n            })\n        }\n    }\n\n    onSubmitFiltersal(e) {\n        e.preventDefault();\n\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.jobs.length; ++i) {\n            if ((this.state.jobs[i].salary <= this.state.maxsal)&&(this.state.jobs[i].salary >= this.state.minsal)) {\n                filteredJobs.push(this.state.jobs[i]);\n            }\n        }\n\n        this.setState({\n            jobs:filteredJobs,\n        })\n    };\n\n    handleClearFilters(e) {\n        this.setState({\n            jobs:this.state.ogJobs,\n        })\n    };\n\n    onSubmitFilterdur(e) {\n        e.preventDefault();\n\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.jobs.length; ++i) {\n            if (this.state.jobs[i].duration < this.state.duration) {\n                filteredJobs.push(this.state.jobs[i]);\n            }\n        }\n\n        this.setState({\n            jobs:filteredJobs,\n        })\n    };\n\n    handleApply(jobid) {\n        console.log(this.state.showalert);\n        \n        console.log(\"apply\");\n        // if(this.state.showalert){\n        var soppromt = prompt('Statement of Purpose:');\n\n        if (soppromt !== null && soppromt.length < 250){\n            \n            const newApplication = {\n                jobId: jobid,\n                appId: ls.get(\"id\"),\n                sop: soppromt,\n            }\n        \n            axios.post('/jobs/apply', newApplication)\n                .then( res => {\n                    alert(\"Applied Successfully\");\n                    this.setState({showalert:false});\n                })\n                .catch( err => {\n                    alert(err.response.data[Object.keys(err.response.data)[0]]);\n                    console.log(err.response);\n                });\n        }\n        else{\n            alert(\"SOP should be between 1 to 250 characters\");\n        }\n\n        // }\n    }\n\n\trender() {\n        console.log(this.state.showalert);\n\t\treturn (\n\t\t\t<div>\n                <Grid container>\n                    {/* <Grid item xs={12} md={3} lg={3}> */}\n                    <Grid item fluid>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n                            <ListItem text>\n                                <h3>Filters</h3>\n                                <br/>\n                                <Link to=\"#\" className=\"btn-flat waves-effect\" onClick={this.handleClearFilters}>\n                                    Clear Filters/Search\n                                </Link>\n                            </ListItem>\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        {/* <div className=\"form-group\">\n                            <label>Search: </label>\n                            <input type=\"text\"\n                                required\n                                className=\"form-control\"\n                                value={this.state.search}\n                                onChange={this.onChangeSearch}\n                            />\n                        </div> */}\n                        <TextField \n                            id=\"standard-basic\" \n                            label=\"Search\" \n                            fullWidth={true}   \n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment>\n                                        <IconButton>\n                                            <SearchIcon />\n                                        </IconButton>\n                                    </InputAdornment>\n                                )}}\n                            value={this.state.search}\n                            onChange={this.onChangeSearch}\n                        />\n                    </List>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button>\n                                <form onSubmit={this.onSubmitFiltersal} noValidate autoComplete=\"off\">\n                                    <label>Salary</label>\n                                    <TextField id=\"standard-basic\" label=\"Enter Min\" fullWidth={true} value={this.state.minsal} onChange={this.onChangeMinsal}/>\n                                    <TextField id=\"standard-basic\" label=\"Enter Max\" fullWidth={true} value={this.state.maxsal} onChange={this.onChangeMaxsal}/>\n                                    <input type=\"submit\" value=\"Filter Salary\" className=\"btn btn-primary\"/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            <ListItem button>\n                                <form onSubmit={this.onSubmitFilterdur} noValidate autoComplete=\"off\">\n                                    <label>Duration</label>\n                                    <TextField id=\"standard-basic\" label=\"1-7 months\" fullWidth={true} value={this.state.duration} onChange={this.onChangeDuration}/>\n                                    <input type=\"submit\" value=\"Filter Duration\" className=\"btn btn-primary\"/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            {/* <ListItem button divider>\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.jobs}\n                                    getOptionLabel={(option) => option.title}\n                                    style={{ width: 300 }}\n                                    renderInput={\n                                        (params) => \n                                        <TextField {...params} label=\"Select Names\" variant=\"outlined\" />\n                                    }\n                                />\n                            </ListItem> */}\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                            {/* <TableCell> \n                                                <Button \n                                                    onClick={this.sortChange}>{this.renderIconSal()}\n                                                </Button>\n                                                Date\n                                            </TableCell> */}\n                                            <TableCell>Title</TableCell>\n                                            <TableCell>Job-Type</TableCell>\n                                            <TableCell>Recruiter</TableCell>\n                                            <TableCell>\n                                                <Button onClick={this.sortChangeSal}>\n                                                    {this.renderIconSal()}\n                                                </Button>\n                                                Salary\n                                            </TableCell>\n                                            <TableCell>\n                                                <Button onClick={this.sortChangeDur}>\n                                                    {this.renderIconDur()}\n                                                </Button>\n                                                Duration\n                                            </TableCell>\n                                            {/* <TableCell>Rating</TableCell> */}\n                                            <TableCell>Apply</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.jobs.map( (job,ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{job.title}</TableCell>\n                                            <TableCell>{job.jobtype}</TableCell>\n                                            <TableCell>{job.rec_name}</TableCell>\n                                            <TableCell>{job.salary}</TableCell>\n                                            <TableCell>{job.duration}</TableCell>\n                                            <TableCell>\n                                                <Button onClick={() => this.handleApply(job._id)}>\n                                                    {/* {this.renderApplyState()} */}\n                                                    Apply\n                                                </Button>\n                                            </TableCell>\n                                        </TableRow>\n                                ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>               \n                    </Grid>    \n                </Grid>            \n            </div>\n\t\t);\n\t}\n}",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"57","replacedBy":"61"},{"ruleId":"59","replacedBy":"62"},{"ruleId":"57","replacedBy":"63"},{"ruleId":"59","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":19,"column":8,"nodeType":"67","messageId":"68","endLine":19,"endColumn":20},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],["69"],["70"],"no-unused-vars","'Autocomplete' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]